/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressMetadataDto,
  BalanceDataDto,
  FarcasterProfileDto,
  HeatMapDto,
  NeighborDto,
  NftDto,
  SocialsDto,
  TokenDto,
} from '../models/index';
import {
    AddressMetadataDtoFromJSON,
    AddressMetadataDtoToJSON,
    BalanceDataDtoFromJSON,
    BalanceDataDtoToJSON,
    FarcasterProfileDtoFromJSON,
    FarcasterProfileDtoToJSON,
    HeatMapDtoFromJSON,
    HeatMapDtoToJSON,
    NeighborDtoFromJSON,
    NeighborDtoToJSON,
    NftDtoFromJSON,
    NftDtoToJSON,
    SocialsDtoFromJSON,
    SocialsDtoToJSON,
    TokenDtoFromJSON,
    TokenDtoToJSON,
} from '../models/index';

export interface AddressesControllerBuildAddressesFCFrameInternalRequest {
    address: string;
    skip: string;
    body: string;
    callback?: string;
}

export interface AddressesControllerGetAddressTransactionsDetailsRequest {
    address: string;
    chainId: number;
    ignoreDenylist?: boolean;
}

export interface AddressesControllerGetBalanceRequest {
    address: string;
}

export interface AddressesControllerGetFarcasterFollowsRequest {
    address: string;
}

export interface AddressesControllerGetHeatmapRequest {
    address: string;
    chainId: number;
    ignoreDenylist?: boolean;
}

export interface AddressesControllerGetNeighborsRequest {
    address: string;
    chainId: number;
}

export interface AddressesControllerGetNftsRequest {
    address: string;
    chainId: number;
}

export interface AddressesControllerGetSocialsRequest {
    address: string;
}

export interface AddressesControllerGetTokensRequest {
    address: string;
    chainId: number;
}

export interface AddressesControllerMetaRequest {
    addresses: string;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async addressesControllerBuildAddressesFCFrameInternalRaw(requestParameters: AddressesControllerBuildAddressesFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerBuildAddressesFCFrameInternal().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling addressesControllerBuildAddressesFCFrameInternal().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addressesControllerBuildAddressesFCFrameInternal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/addresses/{address}/farcaster-frame-internal`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async addressesControllerBuildAddressesFCFrameInternal(requestParameters: AddressesControllerBuildAddressesFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addressesControllerBuildAddressesFCFrameInternalRaw(requestParameters, initOverrides);
    }

    /**
     * Fetches transaction details for a given address and chain ID.
     * Retrieve Address Transactions Details
     */
    async addressesControllerGetAddressTransactionsDetailsRaw(requestParameters: AddressesControllerGetAddressTransactionsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AddressMetadataDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetAddressTransactionsDetails().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling addressesControllerGetAddressTransactionsDetails().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignoreDenylist'] != null) {
            queryParameters['ignoreDenylist'] = requestParameters['ignoreDenylist'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/{chainId}/transactions-details`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressMetadataDtoFromJSON));
    }

    /**
     * Fetches transaction details for a given address and chain ID.
     * Retrieve Address Transactions Details
     */
    async addressesControllerGetAddressTransactionsDetails(requestParameters: AddressesControllerGetAddressTransactionsDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AddressMetadataDto>> {
        const response = await this.addressesControllerGetAddressTransactionsDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the balance for a specified blockchain address.
     * Retrieve address balance
     */
    async addressesControllerGetBalanceRaw(requestParameters: AddressesControllerGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceDataDto>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/balance`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceDataDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the balance for a specified blockchain address.
     * Retrieve address balance
     */
    async addressesControllerGetBalance(requestParameters: AddressesControllerGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceDataDto> {
        const response = await this.addressesControllerGetBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve farcaster follows
     */
    async addressesControllerGetFarcasterFollowsRaw(requestParameters: AddressesControllerGetFarcasterFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarcasterProfileDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetFarcasterFollows().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/farcaster-follows`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarcasterProfileDtoFromJSON));
    }

    /**
     * Retrieve farcaster follows
     */
    async addressesControllerGetFarcasterFollows(requestParameters: AddressesControllerGetFarcasterFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarcasterProfileDto>> {
        const response = await this.addressesControllerGetFarcasterFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a heatmap representation for a given blockchain address and chain ID, illustrating various activities or metrics associated with the address.
     * Retrieve address heatmap
     */
    async addressesControllerGetHeatmapRaw(requestParameters: AddressesControllerGetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HeatMapDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetHeatmap().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling addressesControllerGetHeatmap().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignoreDenylist'] != null) {
            queryParameters['ignoreDenylist'] = requestParameters['ignoreDenylist'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/{chainId}/heatmap`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeatMapDtoFromJSON));
    }

    /**
     * Fetches a heatmap representation for a given blockchain address and chain ID, illustrating various activities or metrics associated with the address.
     * Retrieve address heatmap
     */
    async addressesControllerGetHeatmap(requestParameters: AddressesControllerGetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HeatMapDto>> {
        const response = await this.addressesControllerGetHeatmapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches data about neighbors (or related addresses) for a given blockchain address and chain ID, providing insights into connections and interactions.
     * Retrieve address neighbors
     */
    async addressesControllerGetNeighborsRaw(requestParameters: AddressesControllerGetNeighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NeighborDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetNeighbors().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling addressesControllerGetNeighbors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/{chainId}/neighbors`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NeighborDtoFromJSON));
    }

    /**
     * Fetches data about neighbors (or related addresses) for a given blockchain address and chain ID, providing insights into connections and interactions.
     * Retrieve address neighbors
     */
    async addressesControllerGetNeighbors(requestParameters: AddressesControllerGetNeighborsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NeighborDto>> {
        const response = await this.addressesControllerGetNeighborsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of Non-Fungible Tokens (NFTs) associated with a given blockchain address and chain ID, including details about each NFT.
     * Retrieve user NFTs
     */
    async addressesControllerGetNftsRaw(requestParameters: AddressesControllerGetNftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NftDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetNfts().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling addressesControllerGetNfts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/{chainId}/nfts`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NftDtoFromJSON));
    }

    /**
     * Fetches a list of Non-Fungible Tokens (NFTs) associated with a given blockchain address and chain ID, including details about each NFT.
     * Retrieve user NFTs
     */
    async addressesControllerGetNfts(requestParameters: AddressesControllerGetNftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NftDto>> {
        const response = await this.addressesControllerGetNftsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches social media information associated with a specified blockchain address.
     * Retrieve address social media details
     */
    async addressesControllerGetSocialsRaw(requestParameters: AddressesControllerGetSocialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SocialsDto>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetSocials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/socials`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SocialsDtoFromJSON(jsonValue));
    }

    /**
     * Fetches social media information associated with a specified blockchain address.
     * Retrieve address social media details
     */
    async addressesControllerGetSocials(requestParameters: AddressesControllerGetSocialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SocialsDto> {
        const response = await this.addressesControllerGetSocialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of tokens associated with a given blockchain address and chain ID, detailing the token holdings and related information.
     * Retrieve user tokens
     */
    async addressesControllerGetTokensRaw(requestParameters: AddressesControllerGetTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TokenDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesControllerGetTokens().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling addressesControllerGetTokens().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/addresses/{address}/{chainId}/tokens`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TokenDtoFromJSON));
    }

    /**
     * Fetches a list of tokens associated with a given blockchain address and chain ID, detailing the token holdings and related information.
     * Retrieve user tokens
     */
    async addressesControllerGetTokens(requestParameters: AddressesControllerGetTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TokenDto>> {
        const response = await this.addressesControllerGetTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches metadata for a list of addresses provided as a query parameter.
     * Retrieve address metadata
     */
    async addressesControllerMetaRaw(requestParameters: AddressesControllerMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressMetadataDto>> {
        if (requestParameters['addresses'] == null) {
            throw new runtime.RequiredError(
                'addresses',
                'Required parameter "addresses" was null or undefined when calling addressesControllerMeta().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['addresses'] != null) {
            queryParameters['addresses'] = requestParameters['addresses'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/addresses/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressMetadataDtoFromJSON(jsonValue));
    }

    /**
     * Fetches metadata for a list of addresses provided as a query parameter.
     * Retrieve address metadata
     */
    async addressesControllerMeta(requestParameters: AddressesControllerMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressMetadataDto> {
        const response = await this.addressesControllerMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
