/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockDto,
  EthPriceDto,
  GasPriceDto,
} from '../models/index';
import {
    BlockDtoFromJSON,
    BlockDtoToJSON,
    EthPriceDtoFromJSON,
    EthPriceDtoToJSON,
    GasPriceDtoFromJSON,
    GasPriceDtoToJSON,
} from '../models/index';

export interface BlocksControllerGetBlockRequest {
    chainId: number;
    blockNumber?: number;
    withTransactions?: boolean;
}

export interface BlocksControllerGetBlocksRequest {
    chainId: number;
    startBlock?: number;
    sort?: number;
}

export interface BlocksControllerGetLatestBlockRequest {
    chainId: number;
}

export interface EthPriceControllerGetEthPriceRequest {
    timestamp: number;
}

export interface GasPriceControllerGetGasPriceRequest {
    chainId: number;
    timestamp: number;
}

export interface GasPriceControllerGetLatestGasPriceRequest {
    chainId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Fetches details of a specific block by chain ID and block number, with an option to include transaction details.
     * Retrieve Specific Block
     */
    async blocksControllerGetBlockRaw(requestParameters: BlocksControllerGetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling blocksControllerGetBlock().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['withTransactions'] != null) {
            queryParameters['withTransactions'] = requestParameters['withTransactions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/blocks/{chainId}/{blockNumber}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"blockNumber"}}`, encodeURIComponent(String(requestParameters['blockNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockDtoFromJSON(jsonValue));
    }

    /**
     * Fetches details of a specific block by chain ID and block number, with an option to include transaction details.
     * Retrieve Specific Block
     */
    async blocksControllerGetBlock(requestParameters: BlocksControllerGetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockDto> {
        const response = await this.blocksControllerGetBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of blocks for a given chain ID, with optional parameters to specify the starting block and sorting order.
     * Retrieve Blocks
     */
    async blocksControllerGetBlocksRaw(requestParameters: BlocksControllerGetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlockDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling blocksControllerGetBlocks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startBlock'] != null) {
            queryParameters['startBlock'] = requestParameters['startBlock'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/blocks/{chainId}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlockDtoFromJSON));
    }

    /**
     * Fetches a list of blocks for a given chain ID, with optional parameters to specify the starting block and sorting order.
     * Retrieve Blocks
     */
    async blocksControllerGetBlocks(requestParameters: BlocksControllerGetBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlockDto>> {
        const response = await this.blocksControllerGetBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the latest block for a given chain ID, providing the most recent blockchain data for that chain.
     * Retrieve Latest Block
     */
    async blocksControllerGetLatestBlockRaw(requestParameters: BlocksControllerGetLatestBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling blocksControllerGetLatestBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/blocks/{chainId}/latest`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the latest block for a given chain ID, providing the most recent blockchain data for that chain.
     * Retrieve Latest Block
     */
    async blocksControllerGetLatestBlock(requestParameters: BlocksControllerGetLatestBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockDto> {
        const response = await this.blocksControllerGetLatestBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the price of Ethereum (ETH) for a given timestamp.
     * Retrieve Ethereum Price at Specific Timestamp
     */
    async ethPriceControllerGetEthPriceRaw(requestParameters: EthPriceControllerGetEthPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EthPriceDto>> {
        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling ethPriceControllerGetEthPrice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/eth-price/{timestamp}`.replace(`{${"timestamp"}}`, encodeURIComponent(String(requestParameters['timestamp']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EthPriceDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the price of Ethereum (ETH) for a given timestamp.
     * Retrieve Ethereum Price at Specific Timestamp
     */
    async ethPriceControllerGetEthPrice(requestParameters: EthPriceControllerGetEthPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EthPriceDto> {
        const response = await this.ethPriceControllerGetEthPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the latest price of Ethereum (ETH).
     * Retrieve Latest Ethereum Price
     */
    async ethPriceControllerGetLatestEthPriceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EthPriceDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/eth-price`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EthPriceDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the latest price of Ethereum (ETH).
     * Retrieve Latest Ethereum Price
     */
    async ethPriceControllerGetLatestEthPrice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EthPriceDto> {
        const response = await this.ethPriceControllerGetLatestEthPriceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetches the gas price for a specified blockchain chain ID at a particular timestamp.
     * Retrieve Gas Price at a Specific Timestamp
     */
    async gasPriceControllerGetGasPriceRaw(requestParameters: GasPriceControllerGetGasPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GasPriceDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling gasPriceControllerGetGasPrice().'
            );
        }

        if (requestParameters['timestamp'] == null) {
            throw new runtime.RequiredError(
                'timestamp',
                'Required parameter "timestamp" was null or undefined when calling gasPriceControllerGetGasPrice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/gas-price/{chainId}/{timestamp}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"timestamp"}}`, encodeURIComponent(String(requestParameters['timestamp']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GasPriceDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the gas price for a specified blockchain chain ID at a particular timestamp.
     * Retrieve Gas Price at a Specific Timestamp
     */
    async gasPriceControllerGetGasPrice(requestParameters: GasPriceControllerGetGasPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GasPriceDto> {
        const response = await this.gasPriceControllerGetGasPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the latest gas price for a specified blockchain chain ID.
     * Retrieve Latest Gas Price
     */
    async gasPriceControllerGetLatestGasPriceRaw(requestParameters: GasPriceControllerGetLatestGasPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GasPriceDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling gasPriceControllerGetLatestGasPrice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/gas-price/{chainId}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GasPriceDtoFromJSON(jsonValue));
    }

    /**
     * Fetches the latest gas price for a specified blockchain chain ID.
     * Retrieve Latest Gas Price
     */
    async gasPriceControllerGetLatestGasPrice(requestParameters: GasPriceControllerGetLatestGasPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GasPriceDto> {
        const response = await this.gasPriceControllerGetLatestGasPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
