/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressMetadataDto,
  FarcasterProfileDto,
} from '../models/index';
import {
    AddressMetadataDtoFromJSON,
    AddressMetadataDtoToJSON,
    FarcasterProfileDtoFromJSON,
    FarcasterProfileDtoToJSON,
} from '../models/index';

export interface FarcasterControllerBuildAddressesFCFrameInternalRequest {
    fid: string;
    skip: string;
    body: string;
    callback?: string;
}

export interface FarcasterControllerFarcasterRequest {
    ids: string;
}

export interface FarcasterControllerGetFarcasterFollowersRequest {
    fid: string;
}

export interface FarcasterControllerGetFarcasterFollowsRequest {
    fid: string;
}

export interface FarcasterControllerGetFarcasterLinkedAddressesRequest {
    fid: string;
}

/**
 * 
 */
export class FarcasterApi extends runtime.BaseAPI {

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async farcasterControllerBuildAddressesFCFrameInternalRaw(requestParameters: FarcasterControllerBuildAddressesFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fid'] == null) {
            throw new runtime.RequiredError(
                'fid',
                'Required parameter "fid" was null or undefined when calling farcasterControllerBuildAddressesFCFrameInternal().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling farcasterControllerBuildAddressesFCFrameInternal().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling farcasterControllerBuildAddressesFCFrameInternal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/farcaster/{fid}/farcaster-frame-internal`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters['fid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async farcasterControllerBuildAddressesFCFrameInternal(requestParameters: FarcasterControllerBuildAddressesFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.farcasterControllerBuildAddressesFCFrameInternalRaw(requestParameters, initOverrides);
    }

    /**
     * Fetches Farcaster handles for a list of farcaster IDs provided as a query parameter.
     * Retrieve Farcaster handles
     */
    async farcasterControllerFarcasterRaw(requestParameters: FarcasterControllerFarcasterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressMetadataDto>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling farcasterControllerFarcaster().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/farcaster`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressMetadataDtoFromJSON(jsonValue));
    }

    /**
     * Fetches Farcaster handles for a list of farcaster IDs provided as a query parameter.
     * Retrieve Farcaster handles
     */
    async farcasterControllerFarcaster(requestParameters: FarcasterControllerFarcasterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressMetadataDto> {
        const response = await this.farcasterControllerFarcasterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve farcaster followers
     */
    async farcasterControllerGetFarcasterFollowersRaw(requestParameters: FarcasterControllerGetFarcasterFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarcasterProfileDto>>> {
        if (requestParameters['fid'] == null) {
            throw new runtime.RequiredError(
                'fid',
                'Required parameter "fid" was null or undefined when calling farcasterControllerGetFarcasterFollowers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/farcaster/users/{fid}/followers`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters['fid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarcasterProfileDtoFromJSON));
    }

    /**
     * Retrieve farcaster followers
     */
    async farcasterControllerGetFarcasterFollowers(requestParameters: FarcasterControllerGetFarcasterFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarcasterProfileDto>> {
        const response = await this.farcasterControllerGetFarcasterFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve farcaster follows
     */
    async farcasterControllerGetFarcasterFollowsRaw(requestParameters: FarcasterControllerGetFarcasterFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarcasterProfileDto>>> {
        if (requestParameters['fid'] == null) {
            throw new runtime.RequiredError(
                'fid',
                'Required parameter "fid" was null or undefined when calling farcasterControllerGetFarcasterFollows().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/farcaster/users/{fid}/follows`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters['fid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarcasterProfileDtoFromJSON));
    }

    /**
     * Retrieve farcaster follows
     */
    async farcasterControllerGetFarcasterFollows(requestParameters: FarcasterControllerGetFarcasterFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarcasterProfileDto>> {
        const response = await this.farcasterControllerGetFarcasterFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve farcaster linked addresses
     */
    async farcasterControllerGetFarcasterLinkedAddressesRaw(requestParameters: FarcasterControllerGetFarcasterLinkedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarcasterProfileDto>>> {
        if (requestParameters['fid'] == null) {
            throw new runtime.RequiredError(
                'fid',
                'Required parameter "fid" was null or undefined when calling farcasterControllerGetFarcasterLinkedAddresses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/farcaster/users/{fid}`.replace(`{${"fid"}}`, encodeURIComponent(String(requestParameters['fid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarcasterProfileDtoFromJSON));
    }

    /**
     * Retrieve farcaster linked addresses
     */
    async farcasterControllerGetFarcasterLinkedAddresses(requestParameters: FarcasterControllerGetFarcasterLinkedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarcasterProfileDto>> {
        const response = await this.farcasterControllerGetFarcasterLinkedAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns user profiles for followers of a specified channel on Farcaster. The followers are identified by their Farcaster IDs. This endpoint facilitates the retrieval of detailed profile information for each follower.
     * Retrieve Follower Profiles on Farcaster
     */
    async farcasterControllerWarpcastChannelFollowsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarcasterProfileDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/farcaster/channel-follows/{channel}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarcasterProfileDtoFromJSON));
    }

    /**
     * Returns user profiles for followers of a specified channel on Farcaster. The followers are identified by their Farcaster IDs. This endpoint facilitates the retrieval of detailed profile information for each follower.
     * Retrieve Follower Profiles on Farcaster
     */
    async farcasterControllerWarpcastChannelFollows(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarcasterProfileDto>> {
        const response = await this.farcasterControllerWarpcastChannelFollowsRaw(initOverrides);
        return await response.value();
    }

}
