/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressWithChainIdDto,
  CreateGroupDto,
  GroupDto,
  RenameGroupDto,
  UpdateGroupDto,
} from '../models/index';
import {
    AddressWithChainIdDtoFromJSON,
    AddressWithChainIdDtoToJSON,
    CreateGroupDtoFromJSON,
    CreateGroupDtoToJSON,
    GroupDtoFromJSON,
    GroupDtoToJSON,
    RenameGroupDtoFromJSON,
    RenameGroupDtoToJSON,
    UpdateGroupDtoFromJSON,
    UpdateGroupDtoToJSON,
} from '../models/index';

export interface GroupsControllerAddAddressRequest {
    groupId: string;
    addressWithChainIdDto: AddressWithChainIdDto;
}

export interface GroupsControllerCreateGroupRequest {
    createGroupDto: CreateGroupDto;
}

export interface GroupsControllerDeleteGroupRequest {
    groupId: string;
}

export interface GroupsControllerGetGroupRequest {
    groupId: string;
}

export interface GroupsControllerGetPublicGroupRequest {
    address: string;
    groupId: string;
}

export interface GroupsControllerGetPublicGroupsRequest {
    address: string;
}

export interface GroupsControllerRemoveAddressRequest {
    groupId: string;
    address: string;
}

export interface GroupsControllerRenameGroupRequest {
    groupId: string;
    renameGroupDto: RenameGroupDto;
}

export interface GroupsControllerUpdateGroupRequest {
    groupId: string;
    updateGroupDto: UpdateGroupDto;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Adds an address to the list of addresses in group
     * Add an address to a Group
     */
    async groupsControllerAddAddressRaw(requestParameters: GroupsControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerAddAddress().'
            );
        }

        if (requestParameters['addressWithChainIdDto'] == null) {
            throw new runtime.RequiredError(
                'addressWithChainIdDto',
                'Required parameter "addressWithChainIdDto" was null or undefined when calling groupsControllerAddAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}/add`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressWithChainIdDtoToJSON(requestParameters['addressWithChainIdDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Adds an address to the list of addresses in group
     * Add an address to a Group
     */
    async groupsControllerAddAddress(requestParameters: GroupsControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerAddAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new group with the given details.
     * Create a New Group
     */
    async groupsControllerCreateGroupRaw(requestParameters: GroupsControllerCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['createGroupDto'] == null) {
            throw new runtime.RequiredError(
                'createGroupDto',
                'Required parameter "createGroupDto" was null or undefined when calling groupsControllerCreateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGroupDtoToJSON(requestParameters['createGroupDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Creates a new group with the given details.
     * Create a New Group
     */
    async groupsControllerCreateGroup(requestParameters: GroupsControllerCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerCreateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific group based on the provided group ID.
     * Delete User Group
     */
    async groupsControllerDeleteGroupRaw(requestParameters: GroupsControllerDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific group based on the provided group ID.
     * Delete User Group
     */
    async groupsControllerDeleteGroup(requestParameters: GroupsControllerDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.groupsControllerDeleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Fetches details of a specific group by its ID for the authenticated user.
     * Retrieve User Group
     */
    async groupsControllerGetGroupRaw(requestParameters: GroupsControllerGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerGetGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Fetches details of a specific group by its ID for the authenticated user.
     * Retrieve User Group
     */
    async groupsControllerGetGroup(requestParameters: GroupsControllerGetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerGetGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches groups associated with the authenticated user.
     * Retrieve User Groups
     */
    async groupsControllerGetGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupDtoFromJSON));
    }

    /**
     * Fetches groups associated with the authenticated user.
     * Retrieve User Groups
     */
    async groupsControllerGetGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupDto>> {
        const response = await this.groupsControllerGetGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetches details of a specific public group based on the provided address and group ID.
     * Retrieve User Public Group
     */
    async groupsControllerGetPublicGroupRaw(requestParameters: GroupsControllerGetPublicGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling groupsControllerGetPublicGroup().'
            );
        }

        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerGetPublicGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/groups/public/{address}/{groupId}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Fetches details of a specific public group based on the provided address and group ID.
     * Retrieve User Public Group
     */
    async groupsControllerGetPublicGroup(requestParameters: GroupsControllerGetPublicGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerGetPublicGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches public groups associated with a given address.
     * Retrieve User Public Groups
     */
    async groupsControllerGetPublicGroupsRaw(requestParameters: GroupsControllerGetPublicGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling groupsControllerGetPublicGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/groups/public/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupDtoFromJSON));
    }

    /**
     * Fetches public groups associated with a given address.
     * Retrieve User Public Groups
     */
    async groupsControllerGetPublicGroups(requestParameters: GroupsControllerGetPublicGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupDto>> {
        const response = await this.groupsControllerGetPublicGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches groups starred by the authenticated user.
     * Retrieve Starred User Groups
     */
    async groupsControllerGetStarredGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/starred`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupDtoFromJSON));
    }

    /**
     * Fetches groups starred by the authenticated user.
     * Retrieve Starred User Groups
     */
    async groupsControllerGetStarredGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupDto>> {
        const response = await this.groupsControllerGetStarredGroupRaw(initOverrides);
        return await response.value();
    }

    /**
     * Removes an address from the list of addresses in group
     * Remove an address from a Group
     */
    async groupsControllerRemoveAddressRaw(requestParameters: GroupsControllerRemoveAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerRemoveAddress().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling groupsControllerRemoveAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}/remove/{address}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))).replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Removes an address from the list of addresses in group
     * Remove an address from a Group
     */
    async groupsControllerRemoveAddress(requestParameters: GroupsControllerRemoveAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerRemoveAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Renames the group.
     * rename a Group
     */
    async groupsControllerRenameGroupRaw(requestParameters: GroupsControllerRenameGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerRenameGroup().'
            );
        }

        if (requestParameters['renameGroupDto'] == null) {
            throw new runtime.RequiredError(
                'renameGroupDto',
                'Required parameter "renameGroupDto" was null or undefined when calling groupsControllerRenameGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}/rename`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RenameGroupDtoToJSON(requestParameters['renameGroupDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Renames the group.
     * rename a Group
     */
    async groupsControllerRenameGroup(requestParameters: GroupsControllerRenameGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerRenameGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of an existing group.
     * Update a Group
     */
    async groupsControllerUpdateGroupRaw(requestParameters: GroupsControllerUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDto>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling groupsControllerUpdateGroup().'
            );
        }

        if (requestParameters['updateGroupDto'] == null) {
            throw new runtime.RequiredError(
                'updateGroupDto',
                'Required parameter "updateGroupDto" was null or undefined when calling groupsControllerUpdateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGroupDtoToJSON(requestParameters['updateGroupDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDtoFromJSON(jsonValue));
    }

    /**
     * Updates the details of an existing group.
     * Update a Group
     */
    async groupsControllerUpdateGroup(requestParameters: GroupsControllerUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDto> {
        const response = await this.groupsControllerUpdateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
