/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LogDto,
} from '../models/index';
import {
    LogDtoFromJSON,
    LogDtoToJSON,
} from '../models/index';

export interface LogsControllerGetLogsRequest {
    topic: string;
    chainId: number;
    skip?: number;
}

export interface LogsControllerGetLogsByAddressAndTopicRequest {
    chainId: string;
    address: string;
    topic: string;
    blockNumberStart?: number;
    blockNumberEnd?: number;
}

export interface LogsControllerGetLogsByHashRequest {
    hash: string;
}

/**
 * 
 */
export class LogsApi extends runtime.BaseAPI {

    /**
     * Fetches logs based on the provided query parameters.
     * Retrieve Logs
     */
    async logsControllerGetLogsRaw(requestParameters: LogsControllerGetLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LogDto>>> {
        if (requestParameters['topic'] == null) {
            throw new runtime.RequiredError(
                'topic',
                'Required parameter "topic" was null or undefined when calling logsControllerGetLogs().'
            );
        }

        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling logsControllerGetLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['topic'] != null) {
            queryParameters['topic'] = requestParameters['topic'];
        }

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogDtoFromJSON));
    }

    /**
     * Fetches logs based on the provided query parameters.
     * Retrieve Logs
     */
    async logsControllerGetLogs(requestParameters: LogsControllerGetLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LogDto>> {
        const response = await this.logsControllerGetLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all logs for a given address and topic
     */
    async logsControllerGetLogsByAddressAndTopicRaw(requestParameters: LogsControllerGetLogsByAddressAndTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LogDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling logsControllerGetLogsByAddressAndTopic().'
            );
        }

        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling logsControllerGetLogsByAddressAndTopic().'
            );
        }

        if (requestParameters['topic'] == null) {
            throw new runtime.RequiredError(
                'topic',
                'Required parameter "topic" was null or undefined when calling logsControllerGetLogsByAddressAndTopic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['blockNumberStart'] != null) {
            queryParameters['blockNumberStart'] = requestParameters['blockNumberStart'];
        }

        if (requestParameters['blockNumberEnd'] != null) {
            queryParameters['blockNumberEnd'] = requestParameters['blockNumberEnd'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/logs/{chainId}/{address}/{topic}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters['chainId']))).replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))).replace(`{${"topic"}}`, encodeURIComponent(String(requestParameters['topic']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogDtoFromJSON));
    }

    /**
     * Retrieve all logs for a given address and topic
     */
    async logsControllerGetLogsByAddressAndTopic(requestParameters: LogsControllerGetLogsByAddressAndTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LogDto>> {
        const response = await this.logsControllerGetLogsByAddressAndTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches logs associated with a specific hash, sorted by logIndex.
     * Retrieve Logs by Hash
     */
    async logsControllerGetLogsByHashRaw(requestParameters: LogsControllerGetLogsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LogDto>>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling logsControllerGetLogsByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/logs/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogDtoFromJSON));
    }

    /**
     * Fetches logs associated with a specific hash, sorted by logIndex.
     * Retrieve Logs by Hash
     */
    async logsControllerGetLogsByHash(requestParameters: LogsControllerGetLogsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LogDto>> {
        const response = await this.logsControllerGetLogsByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
