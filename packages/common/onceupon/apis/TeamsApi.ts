/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTeamDto,
  TeamDto,
} from '../models/index';
import {
    CreateTeamDtoFromJSON,
    CreateTeamDtoToJSON,
    TeamDtoFromJSON,
    TeamDtoToJSON,
} from '../models/index';

export interface TeamsControllerAddTeamMemberRequest {
    teamId: string;
    memberAddress: string;
    role: string;
}

export interface TeamsControllerCreateTeamRequest {
    createTeamDto: CreateTeamDto;
}

export interface TeamsControllerDeleteTeamRequest {
    teamId: string;
}

export interface TeamsControllerFindTeamsByIdRequest {
    teamId: string;
}

export interface TeamsControllerRemoveTeamMemberRequest {
    teamId: string;
    memberAddress: string;
    role: string;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Add a team member
     */
    async teamsControllerAddTeamMemberRaw(requestParameters: TeamsControllerAddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling teamsControllerAddTeamMember().'
            );
        }

        if (requestParameters['memberAddress'] == null) {
            throw new runtime.RequiredError(
                'memberAddress',
                'Required parameter "memberAddress" was null or undefined when calling teamsControllerAddTeamMember().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling teamsControllerAddTeamMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams/{teamId}/add/{memberAddress}/{role}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"memberAddress"}}`, encodeURIComponent(String(requestParameters['memberAddress']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Add a team member
     */
    async teamsControllerAddTeamMember(requestParameters: TeamsControllerAddTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamsControllerAddTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new team
     */
    async teamsControllerCreateTeamRaw(requestParameters: TeamsControllerCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['createTeamDto'] == null) {
            throw new runtime.RequiredError(
                'createTeamDto',
                'Required parameter "createTeamDto" was null or undefined when calling teamsControllerCreateTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamDtoToJSON(requestParameters['createTeamDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Create a new team
     */
    async teamsControllerCreateTeam(requestParameters: TeamsControllerCreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamsControllerCreateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a team
     */
    async teamsControllerDeleteTeamRaw(requestParameters: TeamsControllerDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling teamsControllerDeleteTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a team
     */
    async teamsControllerDeleteTeam(requestParameters: TeamsControllerDeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.teamsControllerDeleteTeamRaw(requestParameters, initOverrides);
    }

    /**
     * Get all teams
     */
    async teamsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TeamDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamDtoFromJSON));
    }

    /**
     * Get all teams
     */
    async teamsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TeamDto>> {
        const response = await this.teamsControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Find a team by ID
     */
    async teamsControllerFindTeamsByIdRaw(requestParameters: TeamsControllerFindTeamsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling teamsControllerFindTeamsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Find a team by ID
     */
    async teamsControllerFindTeamsById(requestParameters: TeamsControllerFindTeamsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamsControllerFindTeamsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a team member
     */
    async teamsControllerRemoveTeamMemberRaw(requestParameters: TeamsControllerRemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDto>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling teamsControllerRemoveTeamMember().'
            );
        }

        if (requestParameters['memberAddress'] == null) {
            throw new runtime.RequiredError(
                'memberAddress',
                'Required parameter "memberAddress" was null or undefined when calling teamsControllerRemoveTeamMember().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling teamsControllerRemoveTeamMember().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/teams/{teamId}/remove/{memberAddress}/{role}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"memberAddress"}}`, encodeURIComponent(String(requestParameters['memberAddress']))).replace(`{${"role"}}`, encodeURIComponent(String(requestParameters['role']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDtoFromJSON(jsonValue));
    }

    /**
     * Remove a team member
     */
    async teamsControllerRemoveTeamMember(requestParameters: TeamsControllerRemoveTeamMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDto> {
        const response = await this.teamsControllerRemoveTeamMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
