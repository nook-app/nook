/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetTransactionDto,
  TransactionDto,
} from '../models/index';
import {
    GetTransactionDtoFromJSON,
    GetTransactionDtoToJSON,
    TransactionDtoFromJSON,
    TransactionDtoToJSON,
} from '../models/index';

export interface TransactionsControllerBuildFarcasterFrameRequest {
    hash: string;
    body: string;
    callback?: string;
    buttonText?: string;
    delay?: string;
}

export interface TransactionsControllerBuildFarcasterFrameGetRequest {
    hash: string;
    callback?: string;
    buttonText?: string;
    delay?: string;
}

export interface TransactionsControllerBuildTransactionsFCFrameInternalRequest {
    hash: string;
    body: string;
    callback?: string;
}

export interface TransactionsControllerBuildTxListFarcasterFrameInternalRequest {
    address: string;
    skip: string;
    body: string;
    callback?: string;
}

export interface TransactionsControllerGetTransactionRequest {
    hash: string;
    withContext?: boolean;
}

export interface TransactionsControllerGetTransactionsRequest {
    getTransactionDto: GetTransactionDto;
    includeEnrichedParties?: boolean;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildFarcasterFrameRaw(requestParameters: TransactionsControllerBuildFarcasterFrameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling transactionsControllerBuildFarcasterFrame().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling transactionsControllerBuildFarcasterFrame().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        if (requestParameters['buttonText'] != null) {
            queryParameters['buttonText'] = requestParameters['buttonText'];
        }

        if (requestParameters['delay'] != null) {
            queryParameters['delay'] = requestParameters['delay'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/transactions/{hash}/farcaster-frame`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildFarcasterFrame(requestParameters: TransactionsControllerBuildFarcasterFrameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.transactionsControllerBuildFarcasterFrameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches farcaster frame based on the provided variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildFarcasterFrameGetRaw(requestParameters: TransactionsControllerBuildFarcasterFrameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling transactionsControllerBuildFarcasterFrameGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        if (requestParameters['buttonText'] != null) {
            queryParameters['buttonText'] = requestParameters['buttonText'];
        }

        if (requestParameters['delay'] != null) {
            queryParameters['delay'] = requestParameters['delay'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/transactions/{hash}/farcaster-frame`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Fetches farcaster frame based on the provided variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildFarcasterFrameGet(requestParameters: TransactionsControllerBuildFarcasterFrameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.transactionsControllerBuildFarcasterFrameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildTransactionsFCFrameInternalRaw(requestParameters: TransactionsControllerBuildTransactionsFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling transactionsControllerBuildTransactionsFCFrameInternal().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling transactionsControllerBuildTransactionsFCFrameInternal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/transactions/{hash}/farcaster-frame-internal`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildTransactionsFCFrameInternal(requestParameters: TransactionsControllerBuildTransactionsFCFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.transactionsControllerBuildTransactionsFCFrameInternalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildTxListFarcasterFrameInternalRaw(requestParameters: TransactionsControllerBuildTxListFarcasterFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling transactionsControllerBuildTxListFarcasterFrameInternal().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling transactionsControllerBuildTxListFarcasterFrameInternal().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling transactionsControllerBuildTxListFarcasterFrameInternal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['callback'] != null) {
            queryParameters['callback'] = requestParameters['callback'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/transactions/farcaster-frame-internal/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Fetches farcaster frame based on the provided POST body and the variables in the path.
     * Retrieve Farcaster Frame
     */
    async transactionsControllerBuildTxListFarcasterFrameInternal(requestParameters: TransactionsControllerBuildTxListFarcasterFrameInternalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.transactionsControllerBuildTxListFarcasterFrameInternalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches metadata for a specific transaction based on its hash.
     * Retrieve Transaction Metadata
     */
    async transactionsControllerGetTransactionRaw(requestParameters: TransactionsControllerGetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling transactionsControllerGetTransaction().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['withContext'] != null) {
            queryParameters['withContext'] = requestParameters['withContext'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/transactions/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDtoFromJSON(jsonValue));
    }

    /**
     * Fetches metadata for a specific transaction based on its hash.
     * Retrieve Transaction Metadata
     */
    async transactionsControllerGetTransaction(requestParameters: TransactionsControllerGetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto> {
        const response = await this.transactionsControllerGetTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches transactions based on the provided query parameters.
     * Retrieve Transactions
     */
    async transactionsControllerGetTransactionsRaw(requestParameters: TransactionsControllerGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionDto>>> {
        if (requestParameters['getTransactionDto'] == null) {
            throw new runtime.RequiredError(
                'getTransactionDto',
                'Required parameter "getTransactionDto" was null or undefined when calling transactionsControllerGetTransactions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeEnrichedParties'] != null) {
            queryParameters['includeEnrichedParties'] = requestParameters['includeEnrichedParties'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetTransactionDtoToJSON(requestParameters['getTransactionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionDtoFromJSON));
    }

    /**
     * Fetches transactions based on the provided query parameters.
     * Retrieve Transactions
     */
    async transactionsControllerGetTransactions(requestParameters: TransactionsControllerGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionDto>> {
        const response = await this.transactionsControllerGetTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
