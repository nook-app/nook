/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LabelDto } from './LabelDto';
import {
    LabelDtoFromJSON,
    LabelDtoFromJSONTyped,
    LabelDtoToJSON,
} from './LabelDto';

/**
 * 
 * @export
 * @interface AddressMetadataDto
 */
export interface AddressMetadataDto {
    /**
     * Chain ID. If null, this is a global label (aka for EOA).
     * @type {object}
     * @memberof AddressMetadataDto
     */
    chainId: object;
    /**
     * Labels associated with the address.
     * @type {LabelDto}
     * @memberof AddressMetadataDto
     */
    label: LabelDto;
    /**
     * Flag indicating if the address is a contract.
     * @type {boolean}
     * @memberof AddressMetadataDto
     */
    isContract: boolean;
    /**
     * Token standard. Can be null or one of the ERC standards.
     * @type {string}
     * @memberof AddressMetadataDto
     */
    tokenStandard?: AddressMetadataDtoTokenStandardEnum;
    /**
     * Image URL associated with the address.
     * @type {string}
     * @memberof AddressMetadataDto
     */
    imgUrl: string;
    /**
     * Number of decimals. Can be null for non-tokens.
     * @type {object}
     * @memberof AddressMetadataDto
     */
    decimals?: object;
    /**
     * Symbol representing the token or contract.
     * @type {string}
     * @memberof AddressMetadataDto
     */
    symbol: string;
}


/**
 * @export
 */
export const AddressMetadataDtoTokenStandardEnum = {
    Null: 'null',
    Erc20: 'erc20',
    Erc721: 'erc721',
    Erc1155: 'erc1155'
} as const;
export type AddressMetadataDtoTokenStandardEnum = typeof AddressMetadataDtoTokenStandardEnum[keyof typeof AddressMetadataDtoTokenStandardEnum];


/**
 * Check if a given object implements the AddressMetadataDto interface.
 */
export function instanceOfAddressMetadataDto(value: object): boolean {
    if (!('chainId' in value)) return false;
    if (!('label' in value)) return false;
    if (!('isContract' in value)) return false;
    if (!('imgUrl' in value)) return false;
    if (!('symbol' in value)) return false;
    return true;
}

export function AddressMetadataDtoFromJSON(json: any): AddressMetadataDto {
    return AddressMetadataDtoFromJSONTyped(json, false);
}

export function AddressMetadataDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressMetadataDto {
    if (json == null) {
        return json;
    }
    return {
        
        'chainId': json['chainId'],
        'label': LabelDtoFromJSON(json['label']),
        'isContract': json['isContract'],
        'tokenStandard': json['tokenStandard'] == null ? undefined : json['tokenStandard'],
        'imgUrl': json['imgUrl'],
        'decimals': json['decimals'] == null ? undefined : json['decimals'],
        'symbol': json['symbol'],
    };
}

export function AddressMetadataDtoToJSON(value?: AddressMetadataDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'chainId': value['chainId'],
        'label': LabelDtoToJSON(value['label']),
        'isContract': value['isContract'],
        'tokenStandard': value['tokenStandard'],
        'imgUrl': value['imgUrl'],
        'decimals': value['decimals'],
        'symbol': value['symbol'],
    };
}

