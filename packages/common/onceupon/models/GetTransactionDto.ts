/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddressTag } from './AddressTag';
import {
    AddressTagFromJSON,
    AddressTagFromJSONTyped,
    AddressTagToJSON,
} from './AddressTag';
import type { DateRange } from './DateRange';
import {
    DateRangeFromJSON,
    DateRangeFromJSONTyped,
    DateRangeToJSON,
} from './DateRange';

/**
 * 
 * @export
 * @interface GetTransactionDto
 */
export interface GetTransactionDto {
    /**
     * Context address tags
     * @type {Array<AddressTag>}
     * @memberof GetTransactionDto
     */
    contextAddresses: Array<AddressTag>;
    /**
     * Filter address tags
     * @type {Array<AddressTag>}
     * @memberof GetTransactionDto
     */
    filterAddresses: Array<AddressTag>;
    /**
     * Date ranges
     * @type {DateRange}
     * @memberof GetTransactionDto
     */
    dateRange: DateRange;
    /**
     * Sorting order
     * @type {number}
     * @memberof GetTransactionDto
     */
    sort: GetTransactionDtoSortEnum;
    /**
     * Skip for pagination
     * @type {number}
     * @memberof GetTransactionDto
     */
    skip: number;
    /**
     * Number of Transactions Per Page (Maximum Limit: 1000)
     * @type {number}
     * @memberof GetTransactionDto
     */
    limit: number;
    /**
     * Function selectors
     * @type {Array<string>}
     * @memberof GetTransactionDto
     */
    functionSelectors: Array<string>;
    /**
     * Tokens transferred
     * @type {Array<string>}
     * @memberof GetTransactionDto
     */
    tokenTransfers: Array<string>;
    /**
     * Chain ID
     * @type {Array<number>}
     * @memberof GetTransactionDto
     */
    chainIds: Array<number>;
    /**
     * Block number
     * @type {number}
     * @memberof GetTransactionDto
     */
    blockNumber?: number;
}


/**
 * @export
 */
export const GetTransactionDtoSortEnum = {
    NUMBER_1: 1,
    NUMBER_MINUS_1: -1
} as const;
export type GetTransactionDtoSortEnum = typeof GetTransactionDtoSortEnum[keyof typeof GetTransactionDtoSortEnum];


/**
 * Check if a given object implements the GetTransactionDto interface.
 */
export function instanceOfGetTransactionDto(value: object): boolean {
    if (!('contextAddresses' in value)) return false;
    if (!('filterAddresses' in value)) return false;
    if (!('dateRange' in value)) return false;
    if (!('sort' in value)) return false;
    if (!('skip' in value)) return false;
    if (!('limit' in value)) return false;
    if (!('functionSelectors' in value)) return false;
    if (!('tokenTransfers' in value)) return false;
    if (!('chainIds' in value)) return false;
    return true;
}

export function GetTransactionDtoFromJSON(json: any): GetTransactionDto {
    return GetTransactionDtoFromJSONTyped(json, false);
}

export function GetTransactionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetTransactionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'contextAddresses': ((json['contextAddresses'] as Array<any>).map(AddressTagFromJSON)),
        'filterAddresses': ((json['filterAddresses'] as Array<any>).map(AddressTagFromJSON)),
        'dateRange': DateRangeFromJSON(json['dateRange']),
        'sort': json['sort'],
        'skip': json['skip'],
        'limit': json['limit'],
        'functionSelectors': json['functionSelectors'],
        'tokenTransfers': json['tokenTransfers'],
        'chainIds': json['chainIds'],
        'blockNumber': json['blockNumber'] == null ? undefined : json['blockNumber'],
    };
}

export function GetTransactionDtoToJSON(value?: GetTransactionDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'contextAddresses': ((value['contextAddresses'] as Array<any>).map(AddressTagToJSON)),
        'filterAddresses': ((value['filterAddresses'] as Array<any>).map(AddressTagToJSON)),
        'dateRange': DateRangeToJSON(value['dateRange']),
        'sort': value['sort'],
        'skip': value['skip'],
        'limit': value['limit'],
        'functionSelectors': value['functionSelectors'],
        'tokenTransfers': value['tokenTransfers'],
        'chainIds': value['chainIds'],
        'blockNumber': value['blockNumber'],
    };
}

