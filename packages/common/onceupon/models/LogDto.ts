/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LogDto
 */
export interface LogDto {
    /**
     * Address associated with the log.
     * @type {string}
     * @memberof LogDto
     */
    address: string;
    /**
     * Array of topics related to the log.
     * @type {Array<string>}
     * @memberof LogDto
     */
    topics: Array<string>;
    /**
     * Data contained in the log.
     * @type {string}
     * @memberof LogDto
     */
    data: string;
    /**
     * Block number where this log was recorded.
     * @type {number}
     * @memberof LogDto
     */
    blockNumber: number;
    /**
     * Hash of the transaction.
     * @type {string}
     * @memberof LogDto
     */
    transactionHash: string;
    /**
     * Index of the transaction.
     * @type {number}
     * @memberof LogDto
     */
    transactionIndex: number;
    /**
     * Hash of the block.
     * @type {string}
     * @memberof LogDto
     */
    blockHash: string;
    /**
     * Index of the log in the block.
     * @type {number}
     * @memberof LogDto
     */
    logIndex: number;
    /**
     * Indicates if the log was removed.
     * @type {boolean}
     * @memberof LogDto
     */
    removed: boolean;
    /**
     * Unique identifier of the log.
     * @type {string}
     * @memberof LogDto
     */
    id: string;
    /**
     * Chain ID where the log was recorded.
     * @type {number}
     * @memberof LogDto
     */
    chainId: number;
}

/**
 * Check if a given object implements the LogDto interface.
 */
export function instanceOfLogDto(value: object): boolean {
    if (!('address' in value)) return false;
    if (!('topics' in value)) return false;
    if (!('data' in value)) return false;
    if (!('blockNumber' in value)) return false;
    if (!('transactionHash' in value)) return false;
    if (!('transactionIndex' in value)) return false;
    if (!('blockHash' in value)) return false;
    if (!('logIndex' in value)) return false;
    if (!('removed' in value)) return false;
    if (!('id' in value)) return false;
    if (!('chainId' in value)) return false;
    return true;
}

export function LogDtoFromJSON(json: any): LogDto {
    return LogDtoFromJSONTyped(json, false);
}

export function LogDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogDto {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'],
        'topics': json['topics'],
        'data': json['data'],
        'blockNumber': json['blockNumber'],
        'transactionHash': json['transactionHash'],
        'transactionIndex': json['transactionIndex'],
        'blockHash': json['blockHash'],
        'logIndex': json['logIndex'],
        'removed': json['removed'],
        'id': json['id'],
        'chainId': json['chainId'],
    };
}

export function LogDtoToJSON(value?: LogDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'address': value['address'],
        'topics': value['topics'],
        'data': value['data'],
        'blockNumber': value['blockNumber'],
        'transactionHash': value['transactionHash'],
        'transactionIndex': value['transactionIndex'],
        'blockHash': value['blockHash'],
        'logIndex': value['logIndex'],
        'removed': value['removed'],
        'id': value['id'],
        'chainId': value['chainId'],
    };
}

