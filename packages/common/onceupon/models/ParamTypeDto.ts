/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParamTypeDto
 */
export interface ParamTypeDto {
    /**
     * Local name of the parameter, or null if unbound.
     * @type {string}
     * @memberof ParamTypeDto
     */
    name: string;
    /**
     * Fully qualified type (e.g., "address", "tuple(address)", "uint256[3][]").
     * @type {string}
     * @memberof ParamTypeDto
     */
    type: string;
    /**
     * Base type (e.g., "address", "tuple", "array").
     * @type {string}
     * @memberof ParamTypeDto
     */
    baseType: string;
    /**
     * Indicates if the parameter is indexable. Applicable only for indexable parameters.
     * @type {boolean}
     * @memberof ParamTypeDto
     */
    indexed?: boolean;
    /**
     * Sub-components of the tuple. Applicable only for tuples.
     * @type {Array<ParamTypeDto>}
     * @memberof ParamTypeDto
     */
    components?: Array<ParamTypeDto>;
    /**
     * Length of the array. -1 for dynamic length. Applicable only for arrays.
     * @type {number}
     * @memberof ParamTypeDto
     */
    arrayLength?: number;
    /**
     * Child type of the array. Applicable only for arrays.
     * @type {ParamTypeDto}
     * @memberof ParamTypeDto
     */
    arrayChildren?: ParamTypeDto;
}

/**
 * Check if a given object implements the ParamTypeDto interface.
 */
export function instanceOfParamTypeDto(value: object): boolean {
    if (!('name' in value)) return false;
    if (!('type' in value)) return false;
    if (!('baseType' in value)) return false;
    return true;
}

export function ParamTypeDtoFromJSON(json: any): ParamTypeDto {
    return ParamTypeDtoFromJSONTyped(json, false);
}

export function ParamTypeDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParamTypeDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'baseType': json['baseType'],
        'indexed': json['indexed'] == null ? undefined : json['indexed'],
        'components': json['components'] == null ? undefined : ((json['components'] as Array<any>).map(ParamTypeDtoFromJSON)),
        'arrayLength': json['arrayLength'] == null ? undefined : json['arrayLength'],
        'arrayChildren': json['arrayChildren'] == null ? undefined : ParamTypeDtoFromJSON(json['arrayChildren']),
    };
}

export function ParamTypeDtoToJSON(value?: ParamTypeDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'type': value['type'],
        'baseType': value['baseType'],
        'indexed': value['indexed'],
        'components': value['components'] == null ? undefined : ((value['components'] as Array<any>).map(ParamTypeDtoToJSON)),
        'arrayLength': value['arrayLength'],
        'arrayChildren': ParamTypeDtoToJSON(value['arrayChildren']),
    };
}

