/* tslint:disable */
/* eslint-disable */
/**
 * Once Upon
 * API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReceiptDto
 */
export interface ReceiptDto {
    /**
     * Block hash
     * @type {string}
     * @memberof ReceiptDto
     */
    blockHash: string;
    /**
     * Block number
     * @type {number}
     * @memberof ReceiptDto
     */
    blockNumber: number;
    /**
     * Contract address
     * @type {string}
     * @memberof ReceiptDto
     */
    contractAddress: string;
    /**
     * Cumulative gas used
     * @type {string}
     * @memberof ReceiptDto
     */
    cumulativeGasUsed: string;
    /**
     * Effective gas price
     * @type {string}
     * @memberof ReceiptDto
     */
    effectiveGasPrice: string;
    /**
     * Sender address
     * @type {string}
     * @memberof ReceiptDto
     */
    from: string;
    /**
     * Gas used
     * @type {string}
     * @memberof ReceiptDto
     */
    gasUsed: string;
    /**
     * L1 fee
     * @type {string}
     * @memberof ReceiptDto
     */
    l1Fee: string;
    /**
     * L1 fee scalar
     * @type {string}
     * @memberof ReceiptDto
     */
    l1FeeScalar: string;
    /**
     * L1 gas price
     * @type {string}
     * @memberof ReceiptDto
     */
    l1GasPrice: string;
    /**
     * L1 gas used
     * @type {string}
     * @memberof ReceiptDto
     */
    l1GasUsed: string;
    /**
     * Logs bloom
     * @type {string}
     * @memberof ReceiptDto
     */
    logsBloom: string;
    /**
     * Transaction status
     * @type {boolean}
     * @memberof ReceiptDto
     */
    status: boolean;
    /**
     * Receiver address
     * @type {string}
     * @memberof ReceiptDto
     */
    to: string;
    /**
     * Transaction hash
     * @type {string}
     * @memberof ReceiptDto
     */
    transactionHash: string;
    /**
     * Transaction index
     * @type {number}
     * @memberof ReceiptDto
     */
    transactionIndex: number;
    /**
     * Type of the receipt
     * @type {string}
     * @memberof ReceiptDto
     */
    type: string;
}

/**
 * Check if a given object implements the ReceiptDto interface.
 */
export function instanceOfReceiptDto(value: object): boolean {
    if (!('blockHash' in value)) return false;
    if (!('blockNumber' in value)) return false;
    if (!('contractAddress' in value)) return false;
    if (!('cumulativeGasUsed' in value)) return false;
    if (!('effectiveGasPrice' in value)) return false;
    if (!('from' in value)) return false;
    if (!('gasUsed' in value)) return false;
    if (!('l1Fee' in value)) return false;
    if (!('l1FeeScalar' in value)) return false;
    if (!('l1GasPrice' in value)) return false;
    if (!('l1GasUsed' in value)) return false;
    if (!('logsBloom' in value)) return false;
    if (!('status' in value)) return false;
    if (!('to' in value)) return false;
    if (!('transactionHash' in value)) return false;
    if (!('transactionIndex' in value)) return false;
    if (!('type' in value)) return false;
    return true;
}

export function ReceiptDtoFromJSON(json: any): ReceiptDto {
    return ReceiptDtoFromJSONTyped(json, false);
}

export function ReceiptDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptDto {
    if (json == null) {
        return json;
    }
    return {
        
        'blockHash': json['blockHash'],
        'blockNumber': json['blockNumber'],
        'contractAddress': json['contractAddress'],
        'cumulativeGasUsed': json['cumulativeGasUsed'],
        'effectiveGasPrice': json['effectiveGasPrice'],
        'from': json['from'],
        'gasUsed': json['gasUsed'],
        'l1Fee': json['l1Fee'],
        'l1FeeScalar': json['l1FeeScalar'],
        'l1GasPrice': json['l1GasPrice'],
        'l1GasUsed': json['l1GasUsed'],
        'logsBloom': json['logsBloom'],
        'status': json['status'],
        'to': json['to'],
        'transactionHash': json['transactionHash'],
        'transactionIndex': json['transactionIndex'],
        'type': json['type'],
    };
}

export function ReceiptDtoToJSON(value?: ReceiptDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'blockHash': value['blockHash'],
        'blockNumber': value['blockNumber'],
        'contractAddress': value['contractAddress'],
        'cumulativeGasUsed': value['cumulativeGasUsed'],
        'effectiveGasPrice': value['effectiveGasPrice'],
        'from': value['from'],
        'gasUsed': value['gasUsed'],
        'l1Fee': value['l1Fee'],
        'l1FeeScalar': value['l1FeeScalar'],
        'l1GasPrice': value['l1GasPrice'],
        'l1GasUsed': value['l1GasUsed'],
        'logsBloom': value['logsBloom'],
        'status': value['status'],
        'to': value['to'],
        'transactionHash': value['transactionHash'],
        'transactionIndex': value['transactionIndex'],
        'type': value['type'],
    };
}

