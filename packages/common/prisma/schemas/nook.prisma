generator client {
    provider = "prisma-client-js"
    output   = "../generated/nook"
}

datasource db {
    provider = "postgresql"
    url      = env("NOOK_DATABASE_URL")
}

model User {
    fid          String   @id
    signedUpAt   DateTime
    loggedInAt   DateTime
    refreshToken String
    siwfData     Json?
    theme        String   @default("mauve")

    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    actions UserCastAction[]
    groups  UserPanelGroup[]
    panels  UserPanel[]
    feeds   Feed[]

    mutedUsers      UserMutedUser[]
    mutedWords      UserMutedWord[]
    mutedParentUrls UserMutedParentUrl[]
}

model UserPanelGroup {
    id   String  @id @default(uuid())
    fid  String
    name String
    icon String?
    type String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    panels UserPanel[]
    user   User        @relation(fields: [fid], references: [fid])
}

model UserPanel {
    fid     String
    panelId String
    groupId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user  User           @relation(fields: [fid], references: [fid])
    panel Panel          @relation(fields: [panelId], references: [id], onDelete: Cascade)
    group UserPanelGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@id([fid, panelId])
}

model Panel {
    id   String @id @default(uuid())
    type String
    key  String

    name    String
    display String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users UserPanel[]

    @@unique([type, key])
}

model Feed {
    id  String @id @default(uuid())
    fid String

    type    String  @default("default")
    name    String
    filter  Json
    icon    String?
    api     String?
    display String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?

    user User @relation(fields: [fid], references: [fid])
}

model UserCastAction {
    fid   String
    index Int

    actionId String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user   User       @relation(fields: [fid], references: [fid])
    action CastAction @relation(fields: [actionId], references: [id], onDelete: Cascade)

    @@id([fid, index])
}

model CastAction {
    id         String @id @default(uuid())
    actionType String
    postUrl    String

    name        String
    icon        String
    description String?
    aboutUrl    String?

    creatorFid String?
    hidden     Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    users UserCastAction[]

    @@unique([actionType, postUrl])
}

model UserMutedUser {
    fid      String
    mutedFid String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [fid], references: [fid])

    @@id([fid, mutedFid])
}

model UserMutedWord {
    fid       String
    mutedWord String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [fid], references: [fid])

    @@id([fid, mutedWord])
}

model UserMutedParentUrl {
    fid            String
    mutedParentUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [fid], references: [fid])

    @@id([fid, mutedParentUrl])
}

model PendingCast {
    id             String        @id @default(uuid())
    fid            String
    textHash       String
    text           String
    parentUrl      String?
    parentFid      String?
    parentHash     String?
    castEmbedFid   String?
    castEmbedHash  String?
    embeds         String[]
    scheduledFor   DateTime?
    publishedAt    DateTime?
    attemptedAt    DateTime?
    threadParent   PendingCast?  @relation("ThreadRelation", fields: [threadParentId], references: [id])
    threadParentId String?
    threadChildren PendingCast[] @relation("ThreadRelation")
    threadIndex    Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@unique([threadParentId, threadIndex])
    @@unique([fid, textHash, threadParentId])
    @@index([scheduledFor])
    @@index([fid, scheduledFor])
}
